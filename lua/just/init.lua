-- Handle the output of the recipe and push to the quickfix list
--
-- TODO: there is no way to determine what type of output is generated
-- solely by running the recipe and therefore no way to add a meaningful
-- entry to the quickfix list.
--
-- The 'errorformat' option specifies a list of formats that are recognized.
-- The first match is being used.
-- One take on that is to just concatenate all the error formats and hope for the best
-- This approach would have the least control on how the errors are handled, except they
-- are parsed from the just recipes. This would allow to have fine control over
-- what error format is generated by what recipe. This is maybe the easiest approach to try.
-- Another approach would be to have just output a unified error format and set the error format in neovim to that...

local Job = require("plenary.job")

local utils = require("just.utils")

local M = {}

local justSummary = Job:new({
	command = "just",
	args = { "--summary" },
})

local justList = Job:new({
	command = "just",
	args = { "--list" },
})

-- Strip the lines of any ansi terminal color codes
local sanitize = function(lines)
	for i = 1, #lines do
		lines[i] = (lines[i]):gsub(string.char(27) .. "[[0-9;]*m]", "")
	end
end

M.setup = function(opts)
	vim.api.nvim_create_user_command("Just", function(opts)
		local stdout_results = {}
		local stderr_results = {}

		local justJob = Job:new({
			command = "just",
			args = { opts.fargs[1] },
			-- is this callback broken, or how is it properly used to get stoud?
			on_stdout = function(data, line)
				if data then
					table.insert(data)
				end
				table.insert(stdout_results, line)
			end,
			on_stderr = function(data, line)
				if data then
					table.insert(data)
				end
				table.insert(stderr_results, line)
			end,
		})
		justJob:sync() -- Synchronous for now

		print("a")

		utils.printTable(stdout_results)
		utils.printTable(stderr_results)

		-- vim.fn.setqflist({}, "a", {
		-- 	lines = sanitize(stdout_results),
		-- 	efm = "%m",
		-- })
		vim.fn.setqflist({}, "a", {
			lines = stderr_results,
			-- efm = "./%f: line %l: %m",
			efm = "%f: line %l: %m, error: Recipe %m failed on line %l",
		})

		-- only open the quickfix if there are errors
		if #stderr_results > 0 then
			vim.api.nvim_command("copen")
		end
	end, {
		nargs = "*",
		complete = function()
			justSummary:sync() -- or start()
			return utils.splitString(justSummary:result()[1], " ")
		end,
	})
end

return M
